% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/GeneScan3D.R
\name{GeneScan3D}
\alias{GeneScan3D}
\title{Conduct gene-based scan test on the gene buffer region, adding one promoter and R enhancers.}
\usage{
GeneScan3D(
  G = G_gene_buffer,
  Z = Z_gene_buffer,
  G.promoter = G_promoter,
  Z.promoter = Z_promoter,
  G.EnhancerAll = cbind(G_Enhancer1, G_Enhancer2),
  Z.EnhancerAll = rbind(Z_Enhancer1, Z_Enhancer2),
  R = 2,
  p_Enhancer = c(dim(G_Enhancer1)[2], dim(G_Enhancer2)[2]),
  window.size = c(1000, 5000, 10000),
  pos = pos_gene_buffer,
  pos_promoter = pos_promoter,
  MAC.threshold = 5,
  MAF.threshold = 1/sqrt(2 * n),
  Gsub.id = NULL,
  impute.method = "fixed",
  result.prelim = result.prelim
)
}
\arguments{
\item{G}{The genotype matrix in the gene buffer region, which is a n*p matrix where n is the number of subjects and p is the number of genetic variants in the gene buffer region.}

\item{Z}{A p*q genonet matrix matrix where p is the number of genetic variables and q is the number of functional scores (weights). The default is NULL, which uses the beta(MAF; 1,25) weight.}

\item{G.promoter}{The genotype matrix for promoter region.}

\item{Z.promoter}{The genonet matrix for promoter region.}

\item{G.EnhancerAll}{The genotype matrix for R enhancers, combined together by columns.}

\item{Z.EnhancerAll}{The genonet matrix for R enhancers, combined together by rows.}

\item{R}{Number of enhancers.}

\item{p_Enhancer}{Number of variants in R enhancers, which is a 1*R vector.}

\item{window.size}{The 1-D window sizes in base pairs to scan the gene buffer region. The default is c(1000,5000,10000).}

\item{pos}{The positions of genetic variants in the gene buffer region, an p dimensional vector. Each position corresponds to a column in the genotype matrix G.}

\item{pos_promoter}{The positions of genetic variants in the promoter region. Each position corresponds to a column in the genotype matrix G.promoter.}

\item{MAC.threshold}{Threshold for minor allele count. Variants below MAC.threshold are ultra-rare variants. The default is 5.}

\item{MAF.threshold}{Threshold for minor allele frequency. Variants below MAF.threshold are rare variants. The default is 1/sqrt(2*n).}

\item{Gsub.id}{The subject id corresponding to the genotype matrix, an n dimensional vector. The default is NULL, where the matched phenotype and genotype matrices are assumed.}

\item{impute.method}{Imputation method when there is missing genotype. Can be "random", "fixed" or "bestguess".}

\item{result.prelim}{The output of function "GeneScan.prelim()".}
}
\value{
\item{GeneScan3D.Cauchy.pvalue}{Cauchy combined p-values under all, common and rare variants for GeneScan3D analysis.}

\item{M}{Number of 1D scanning windows.}

\item{minp}{Minimum p-values under all, common and rare variants for 3D windows.}

\item{RE_minp}{The regulartory elements in the 3D windows corresponding to the minimum p-values, under all, common and rare variants. 0 represents promoter and a number from 1 to R represents promoter plus r-th enhancer.}
}
\description{
This function conduct gene-based scan test on the gene buffer region, incorporating the regulatory elements, i.e., one promoter and R enhancers.
}
\examples{
library(GeneScan3DKnock)

# Load data example

data("GeneScan3D.example")
Y=GeneScan3D.example$Y; X=GeneScan3D.example$X;
G_gene_buffer=GeneScan3D.example$G_gene_buffer; G_promoter=GeneScan3D.example$G_promoter;
G_Enhancer1=GeneScan3D.example$G_Enhancer1; G_Enhancer2=GeneScan3D.example$G_Enhancer2;
Z_gene_buffer=GeneScan3D.example$Z_gene_buffer; Z_promoter=GeneScan3D.example$Z_promoter;
Z_Enhancer1=GeneScan3D.example$Z_Enhancer1; Z_Enhancer2=GeneScan3D.example$Z_Enhancer2;
pos_gene_buffer=GeneScan3D.example$pos_gene_buffer;
pos_promoter=GeneScan3D.example$pos_promoter;
n=length(Y)

# Preliminary data management
result.prelim=GeneScan.prelim(Y, X, out_type="C", B=1000)

# Conduct 3D gene-based scan test on the gene buffer region, adding one promoter and R enhancers
result.GeneScan3D=GeneScan3D(G=G_gene_buffer,Z=Z_gene_buffer,
G.promoter=G_promoter, Z.promoter=Z_promoter,
G.EnhancerAll=cbind(G_Enhancer1,G_Enhancer2),Z.EnhancerAll=rbind(Z_Enhancer1,Z_Enhancer2),
R=2,p_Enhancer=c(dim(G_Enhancer1)[2],dim(G_Enhancer2)[2]),window.size=c(1000,5000,10000),
pos=pos_gene_buffer,pos_promoter=pos_promoter,MAC.threshold=5,MAF.threshold=1/sqrt(2*n),
Gsub.id=NULL,impute.method='fixed',result.prelim=result.prelim)

}
